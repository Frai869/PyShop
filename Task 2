import unittest
from PyShop import get_score


class TestGetScore(unittest.TestCase):

    game_stamps = [
        {'offset': 1, 'score': {'away': 0, 'home': 0}},
        {'offset': 3, 'score': {'away': 1, 'home': 0}},
        {'offset': 4, 'score': {'away': 1, 'home': 0}},
        {'offset': 7, 'score': {'away': 2, 'home': 1}},
    ]

    def test_existed_offset(self):
        self.assertEqual(get_score(self.game_stamps,1), (0, 0))
        self.assertEqual(get_score(self.game_stamps,7), (1, 2))

    def test_missed_offset(self):
        self.assertEqual(get_score(self.game_stamps, 2), (0, 0))
        self.assertEqual(get_score(self.game_stamps, 5), (0, 1))

    def test_offset_out_of_range(self):
        self.assertEqual(get_score(self.game_stamps, 0), (0, 0))
        self.assertEqual(get_score(self.game_stamps, 999999), (1, 2))

    def test_offset_negative(self):
        with self.assertRaises(ValueError):
            get_score(self.game_stamps, -1)

    def test_offset_type(self):
        with self.assertRaises(TypeError):
            get_score(self.game_stamps, 5.5)
        with self.assertRaises(TypeError):
            get_score(self.game_stamps, 'one')
        with self.assertRaises(TypeError):
            get_score(self.game_stamps, True)
        with self.assertRaises(TypeError):
            get_score(self.game_stamps, 1 + 2j)
        with self.assertRaises(TypeError):
            get_score(self.game_stamps, [])
        with self.assertRaises(TypeError):
            get_score(self.game_stamps, {1: 5})
        with self.assertRaises(TypeError):
            get_score(self.game_stamps, (9,))


if __name__ == '__main__':
    unittest.main()
